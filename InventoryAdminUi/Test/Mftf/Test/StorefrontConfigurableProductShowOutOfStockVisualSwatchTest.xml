<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontConfigurableProductShowOutOfStockVisualSwatchTest">
        <annotations>
            <stories value="Configurable Product Custom Stock."/>
            <title value="Verify configurable product on storefront with out of stock visual swath option."/>
            <description value="Verify configurable out of stock swatch option is visible in case 'show out of stock products' in enabled."/>
            <testCaseId value="https://studio.cucumber.io/projects/69435/test-plan/folders/457025/scenarios/4718648"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>

        <before>
            <!--Create test data.-->
            <createData entity="_minimalSource" stepKey="source"/>
            <createData entity="BasicMsiStockWithMainWebsite1" stepKey="stock"/>
            <createData entity="SourceStockLinked1" stepKey="sourceStockLink">
                <requiredEntity createDataKey="stock"/>
                <requiredEntity createDataKey="source"/>
            </createData>
            <createData entity="ConfigurableMsiProduct" stepKey="configurableProduct"/>
            <!-- Create a configurable swatch product via the UI -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedProductEditPageActionGroup" stepKey="navigateToConfigurableProduct">
                <argument name="product" value="$configurableProduct$"/>
            </actionGroup>
            <selectOption selector="{{AdminProductFormSection.productStockStatus}}" userInput="In Stock" stepKey="setProductStockStatus"/>
            <actionGroup ref="AddVisualSwatchCustomSourceToProductActionGroup" stepKey="addSwatchToProduct">
                <argument name="sourceName" value="$source.source[name]$"/>
            </actionGroup>
            <!--Set configurable variation stock status to 'out of stock'.-->
            <actionGroup ref="SearchForProductOnBackendByNameActionGroup" stepKey="findConfigurableVariation">
                <argument name="productName" value="{{visualSwatchOption1.admin_label}}"/>
            </actionGroup>
            <actionGroup ref="OpenProductForEditByClickingRowXColumnYInProductGridActionGroup" stepKey="openConfigurableVariation"/>
            <actionGroup ref="AdminChangeSourceStockStatusActionGroup" stepKey="setProductToOutOfStock">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
                <argument name="sourceStatus" value="{{SourceStatusOutOfStock.value}}"/>
            </actionGroup>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveProduct"/>
            <magentoCLI command="config:set {{CatalogInventoryOptionsShowOutOfStockDisable.path}} {{CatalogInventoryOptionsShowOutOfStockDisable.value}}" stepKey="disableShowOutOfStockProducts"/>
            <magentoCron groups="index" stepKey="reindex"/>
        </before>
        <after>
            <magentoCLI command="config:set {{CatalogInventoryOptionsShowOutOfStockDisable.path}} {{CatalogInventoryOptionsShowOutOfStockDisable.value}}" stepKey="disableShowOutOfStockProducts"/>
            <magentoCron groups="index" stepKey="reindex"/>
            <actionGroup ref="DeleteAllProductsUsingProductGridActionGroup" stepKey="deleteProducts"/>
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="disableAdditionalSource"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutOfAdmin"/>
            <deleteData createDataKey="stock" stepKey="deleteStock"/>
        </after>

        <!--Verify configurable product swatch option on storefront.-->
        <actionGroup ref="OpenStoreFrontProductPageActionGroup" stepKey="navigateToConfigurablePDP">
            <argument name="productUrlKey" value="$configurableProduct.custom_attributes[url_key]$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertSwatchOptionIsNotVisibleActionGroup" stepKey="verifyInStockOptionIsNotVisible">
            <argument name="swatchLabel" value="{{visualSwatchOption1.default_label}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertSwatchOptionIsVisibleActionGroup" stepKey="verifyInStockOptionIsVisible">
            <argument name="swatchLabel" value="{{visualSwatchOption2.default_label}}"/>
        </actionGroup>
        <magentoCLI command="config:set {{CatalogInventoryOptionsShowOutOfStockEnable.path}} {{CatalogInventoryOptionsShowOutOfStockEnable.value}}" stepKey="enableShowOutOfStockProducts"/>
        <magentoCron groups="index" stepKey="reindex"/>
        <reloadPage stepKey="reloadConfigurablePDP"/>
        <waitForPageLoad stepKey="waitForPageReload"/>
        <actionGroup ref="StorefrontAssertSwatchOptionIsDisabledActionGroup" stepKey="verifyInStockOptionIsVisibleAndDisabled">
            <argument name="swatchLabel" value="{{visualSwatchOption1.default_label}}"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertSwatchOptionIsVisibleActionGroup" stepKey="verifyInStockOptionIsVisibleAfterEnableShowOutOfStockProducts">
            <argument name="swatchLabel" value="{{visualSwatchOption2.default_label}}"/>
        </actionGroup>
    </test>
</tests>
